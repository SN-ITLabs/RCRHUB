<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_rcr_hub.RCRNotificationService</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>RCRNotificationService</name>
        <script><![CDATA[var RCRNotificationService = Class.create();
RCRNotificationService.prototype = {
    initialize: function() {
		this.DEFAULT_REVIEWS_DELTA_HOURS = 4;
    },
	
	fetchReviews : function(hoursAgo){
		if (!hoursAgo) 
			hoursAgo = this.DEFAULT_REVIEWS_DELTA_HOURS;

		var reviews = [];
		
		var gr = new GlideRecord("x_snc_rcr_hub_review_results");
		gr.addEncodedQuery("review_last_seen>=javascript:gs.hoursAgo(" + hoursAgo + ")^review_status=open");
		gr.orderBy('instance_name');
		gr.orderBy('file_name');
		gr.orderBy('line_number');
		gr.query();
		
		while (gr.next()) {
			var review = {};
			review['developer'] = gr.getValue('developer');
			review['manager'] = gr.getValue('manager');
			review['instance_name'] = gr.getValue('instance_name');
			review['file_name'] = gr.getValue('file_name');
			review['file_url'] = gr.getValue('file_url');
			review['line_number'] = gr.getValue('line_number');
			review['rule_number'] = gr.getValue('rule_number')? (gr.getValue('rule_number').substr(1)) : '';
			review['review_last_seen'] = gr.getValue('review_last_seen');
			review['review_comments'] = gr.getValue('review_comments');
			review['occurrence'] = gr.getValue('occurrence');
			review['number'] = gr.getValue('number');
			var _ctDate = new GlideDateTime(gr.getValue('sys_created_on')); 
			var _rvDate = new GlideDateTime(gr.getValue('review_last_seen')); 
			if (_ctDate && _rvDate){
				var _dur = GlideDateTime.subtract(_ctDate, _rvDate); //the difference between gdt1 and gdt2
				review['age'] =  _dur.getRoundedDayPart() + ' days'; //_dur.getDisplayValue();
			}
			reviews.push(review);
		}
		
		return reviews;
	},
	
	groupReviewsByEmployeesAndManager : function(arrayOfReviews){
		 var managersList = {};
		 for(var idx in arrayOfReviews) {
			 var review = arrayOfReviews[idx];
			 //HACK.... HACK....HACK....HACK.... 			 
			 if (!review['manager']) review['manager'] = 'unknown';
			 
			 var _manager = review['manager'];
			 if(!managersList.hasOwnProperty(_manager)) managersList[_manager] = {};
			 
			 var _developer = review['developer'];
			 if(!managersList[_manager].hasOwnProperty(_developer))  managersList[_manager][_developer] = [];
			 
			 managersList[_manager][_developer].push(review);
		 }
		return managersList;
	},
	
	prepareTableTemplate :function(managerList){
		
		var emailTemplateArray = [];
		
		var tableDefinition = ['<table style = "border-collapse:collapse;width:100%;font-family: sans-serif;font-size: 12px;"><tbody>',
             '<tr>',
 				    '<th valign="top" style="border: solid 1px #ccc;">Review No</th>',
					'<th valign="top" style="border: solid 1px #ccc;">Instance</th>',
					'<th valign="top" style="border: solid 1px #ccc;">File</th>',
 					'<th valign="top" style="border: solid 1px #ccc;">Review Comments</th>',
 					'<th valign="top" style="border: solid 1px #ccc;">Developer</th>',
					//'<th valign="top" style="border: solid 1px #ccc;">Rule #</th>',
					'<th valign="top" style="border: solid 1px #ccc;">Age of finding</th>',
            '</tr>'].join('');


		for(var manager in managerList) {			
			var listOfReviewsByDeveloper = '', toList = '', ccList = '';
			for(var developer in managerList[manager]) {
				toList += toList ? (',' + developer +'@servicenow.com') : (developer +'@servicenow.com');
				
				managerList[manager][developer].forEach(function(review,index){
				 listOfReviewsByDeveloper = listOfReviewsByDeveloper + '<tr>'+
					'<td valign="top" style="border: solid 1px #ccc;">'+review['number']+'</td>'+
					'<td valign="top" style="border: solid 1px #ccc;">'+review['instance_name']+'</td>'+
					'<td valign="top" style="border: solid 1px #ccc;"><a href="'+
					 review['file_url'] + '">'+review['file_name']+'</a></td>'+
					'<td valign="top" style="border: solid 1px #ccc;">[line:'+ review['line_number'] +']'+ review['review_comments']+'</td>'+
					'<td valign="top" style="border: solid 1px #ccc;">'+review['developer']+'</td>'+
					//'<td valign="top" style="border: solid 1px #ccc;">'+review['rule_number']+'</td>'+
					'<td valign="top" style="border: solid 1px #ccc;">'+ review['age'] +'</td>'+
					'</tr>';
				});	
			}
			var _template = tableDefinition+listOfReviewsByDeveloper+"</tbody></table>";
			//gs.info(_template);
		
			ccList = manager + '@servicenow.com';
			
			if(manager == 'unknown'){
				ccList = 'chaitanya.saragadam@servicenow.com';
				toList = 'chaitanya.saragadam@servicenow.com';				
			}
			
			/**********************************
			 *** DEBUGGGGGG
			 **********************************
				toList = 'pradeep.gouribhatla@servicenow.com,chaitanya.saragadam@servicenow.com';
				ccList = 'chaitanya.saragadam@servicenow.com';
			 **********************************/
				
			var emailPayload = {
				toList : toList,
				ccList : ccList,
				template : _template
			};
			
			emailTemplateArray.push(emailPayload);
			
		}
		
		return emailTemplateArray;
	},
	
	getRCREmailObj : function(){
		
		var hoursAgo = gs.getProperty('x_snc_rcr_hub.rcr.notification.interval');
		
		var _reviews = this.fetchReviews(hoursAgo);
		
		if (_reviews){
			var reviewsByGroup = this.groupReviewsByEmployeesAndManager(_reviews);
			var emailTemplateObj = this.prepareTableTemplate(reviewsByGroup);
			return emailTemplateObj;
		}
	},
	
	sendEmail : function(){
		
		var emailTemplatesArray = this.getRCREmailObj();
		
		if(!emailTemplatesArray) return;
		
		for(var idx in emailTemplatesArray) {	
			var emailPayload = emailTemplatesArray[idx];
			if (!emailPayload.template || !emailPayload.toList){
				gs.info("RCR Findings : No reviews found ");
				return;
			}

			gs.eventQueue('x_snc_rcr_hub.scheduled.notification', 
						  null, emailPayload.toList, JSON.stringify(emailPayload));

			gs.info("Sending today's RCR Findings - Event created");
		}

	},
	
    type: 'RCRNotificationService'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>anil.akula</sys_created_by>
        <sys_created_on>2017-10-28 19:27:05</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fd04a952dbce0f407236d9f0ce9619f3</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>RCRNotificationService</sys_name>
        <sys_package display_value="RcR-Hub" source="x_snc_rcr_hub">fa919f87db9dc3007236d9f0ce961914</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="RcR-Hub">fa919f87db9dc3007236d9f0ce961914</sys_scope>
        <sys_update_name>sys_script_include_fd04a952dbce0f407236d9f0ce9619f3</sys_update_name>
        <sys_updated_by>pradeep</sys_updated_by>
        <sys_updated_on>2017-12-12 16:34:30</sys_updated_on>
    </sys_script_include>
</record_update>
